float map(vec3 pos) { 
    return pos.y;
}

vec3 rayCast(vec3 rd, float t, vec3 ro) { //t = parametro
    return rd * t + ro;
}

vec3 posCam = vec3(0);
int fov = 45;

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    for (int angX = fov; angX > -fov; angX--) {
        for (int angZ = -fov; angZ < fov; angZ++) { //partimos desde esq sup izda
            if (angZ < 0) angZ += 180; //4ยบ --> 1er cuad
            
            float angZ_Rads = radians(float(angZ)), t = map(posCam); //partimos desde p0 = posCam getDistMinAlObj
            vec3 p1 = normalize(vec3(cos(angZ_Rads), sin(angZ_Rads), 0)); //vec3 p1 = rayCast(normalize(0, cos(ang), 0)); //avanzamos la distancia t en la direccion del rayo           
        }
    }

    fragColor = vec4( vec3(0), 1.0 );
}

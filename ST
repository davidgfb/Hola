float map(vec3 pos) { 
    return pos.y;
}

vec3 rayCast(vec3 dir_Rayo, float t, vec3 oRayo) { //t = parametro
    return dir_Rayo * t + oRayo;
}

vec3 posCam = vec3(0);
int fov = 45;

void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    for (int beta = fov; beta > -fov; beta--) {
        if (beta < 0) beta += 180;
    
        for (int alfa = -fov; alfa < fov; alfa++) { //partimos desde esq sup izda
            if (alfa < 0) alfa += 180; //4ยบ --> 1er cuad
            
            float alfa_Rads = radians(float(alfa)), t = map(posCam); //partimos desde p0 = posCam getDistMinAlObj
            vec3 dir_Rayo = normalize(vec3(cos(alfa_Rads), sin(alfa_Rads), 0)); //vec3 p1 = rayCast(normalize(0, cos(ang), 0)); //avanzamos la distancia t en la direccion del rayo           
        }
    }

    fragColor = vec4( vec3(0), 1.0 );
}

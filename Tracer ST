const vec3 negro = vec3(0);
//const vec4 OutlineColor = vec4(vec3(1), 1.0);
const float AlmostZero = 1e-3;

float SceneSDF(vec3 View)
{
    return View.z;
    /*float Shape = Cone(View - vec3(0.0, 10.0, -1.0), 1.0, 2.0);
    Shape = Union(Shape, Cone(vec3(View.xy, -View.z) - vec3(-2.0, 10.0, -1.0), 1.0, 2.0));
    Shape = Union(Shape, Cone(vec3(View.xy, -View.z) - vec3(2.0, 10.0, -1.0), 1.0, 2.0));
    return Shape;*/
}

vec3 GetRayDir(vec2 FragCoord, vec2 Resolution, float FOV)
{
    float Aspect = Resolution.y / Resolution.x;
    vec2 NDC = FragCoord / iResolution.xy * 2.0 - 1.0;
    vec2 Angle = NDC * vec2(FOV, FOV * Aspect) * 0.5;
    vec3 RayDir = vec3(sin(radians(Angle)), 0.0).xzy;
    RayDir.y = sqrt(1.0 - (RayDir.x * RayDir.x) - (RayDir.z * RayDir.z));
    return RayDir;
}

bool RayMarch(vec3 RayDir, float TravelStart, float TravelEnd, out vec3 Position) {
    float Traveled = TravelStart;
    bool bHit = false;
    
    for (int i=0; i<100; ++i) {
    	Position = RayDir * Traveled;
        float Dist = SceneSDF(Position);
		Traveled += Dist;
        bHit = Dist < AlmostZero;
        
        if (bHit || Traveled >= TravelEnd) {
            break;
        }
    }
    
    return bHit;
}

vec3 Gradient(vec3 Position)
{
    float Dist = SceneSDF(Position);
    return normalize(vec3(
    	SceneSDF(vec3(Position.x + AlmostZero, Position.y, Position.z)) - Dist,
        SceneSDF(vec3(Position.x, Position.y + AlmostZero, Position.z)) - Dist,
    	SceneSDF(vec3(Position.x, Position.y, Position.z + AlmostZero)) - Dist));
}

void mainImage( out vec4 FragColor, in vec2 FragCoord )
{
    vec3 RayDir = GetRayDir(FragCoord.xy, iResolution.xy, 45.0);
    vec3 Position;
    bool bHit = RayMarch(RayDir, 1.0, 1000.0, Position);
    /*bool bOutline = fwidth(float(bHit)) > 0.0;
    if (bOutline)
    {
        FragColor = OutlineColor;
    }
   	else*/
    if (bHit)
    {
        vec3 Normal = Gradient(Position);
        FragColor = vec4(Normal * 0.5 + 1.0, 1.0);
        if (any(lessThan(mod(Position, 0.5), vec3(0.015))))
        {
            FragColor.xyz *= 0.5;
        }
    }
    else
    {
        FragColor = vec4(negro, 1);
    }
}
